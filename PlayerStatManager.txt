(ModuleScript)
Handles all saving that occurs. Any true saving (ROBLOX data store assigning)
-------------------------------------------------------------------------------------------------------------------------------------------------
local PlayerStatManager = {}

local tycoons = game.Workspace["Tycoon Game"]:WaitForChild("Tycoons"):GetChildren()

local serverStorage = game:GetService("ServerStorage")
local PlayerData = serverStorage:FindFirstChild("PlayerData")
local DataStoreService = game:GetService("DataStoreService") 
local Utility = require(game.ServerScriptService:WaitForChild("Utility"))
local UpdateInventory = game.ReplicatedStorage.Events.GUI:WaitForChild("UpdateInventory")
local UpdateTycoonStorage = game.ReplicatedStorage.Events.GUI:WaitForChild("UpdateTycoonStorage")
local DepositInventory = game.ReplicatedStorage.Events.Utility:WaitForChild("DepositInventory")
local SellItem = game.ReplicatedStorage.Events.Utility:WaitForChild("SellItem")

local PlayerSave = DataStoreService:GetDataStore("Tycoon Test190") --Changing this will change the datastore info is taken from

local sessionData = {}

local function UpdateGUIForFile(DataTabName, PlayerDataFile, player, playerUserId, statName, value)
	local DataTab = PlayerDataFile:FindFirstChild(DataTabName) --Example: (UserId).Experience
	for i,file in pairs (DataTab:GetChildren()) do
		if file:FindFirstChild(tostring(statName)) then --DataTab:FindFirstChild(file):FindFirstChild(statName)?
			local total = sessionData[playerUserId][statName]
			local amountAdded = value
			
			if tostring(DataTabName) == "Inventory" or tostring(DataTabName) == "Experience" then
				local LocationOfAcquirement
				if tostring(DataTabName) == "Inventory" then
					for i,location in pairs (game.ReplicatedStorage:GetChildren()) do--possibly make a ItemLocations folder
						if location:FindFirstChild(statName) then
							LocationOfAcquirement = tostring(location)
						end
					end
				else
					LocationOfAcquirement = "Skills"
				end
				print("ACQUIREMENT: ", LocationOfAcquirement, DataTabName)
				UpdateInventory:FireClient(player, statName, tostring(file), tostring(total), amountAdded, tostring(DataTab), nil, LocationOfAcquirement)
				
			elseif tostring(DataTabName) == "TycoonStorage" then
				UpdateTycoonStorage:FireClient(player, tostring(file), statName, tostring(total), amountAdded)
				
			elseif tostring(DataTabName) == "Currencies" then
				local RScurrency = game.ReplicatedStorage.Currencies:FindFirstChild(statName)
				
				--if Global currency
				Utility:UpdateMoneyDisplay(player, Utility:ConvertShort(total))
				UpdateInventory:FireClient(player, statName, tostring(DataTab), nil, amountAdded, "Inventory", RScurrency.Value)
				--(put inventory for parameter so popup shows up; otherwise, leave nil.)
			end
		end
	end
end

--Change saved stat to new value
function PlayerStatManager:ChangeStat(player, statName, value, File, Currency, special)
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(playerUserId))
	
	--print(typeof(sessionData[playerUserId][statName]),typeof(value),statName,sessionData[playerUserId][statName])	
	assert(typeof(sessionData[playerUserId][statName]) == typeof(value), tostring(player) .. "'s saved value types don't match")
	if typeof(sessionData[playerUserId][statName]) == "number" then
		if sessionData[playerUserId][statName] ~= sessionData[playerUserId][statName] + value or special then --if changed	
			if special == "Zero" then
				print("Zeroing " .. tostring(statName))
				sessionData[playerUserId][statName] = 0
			else
				sessionData[playerUserId][statName] = sessionData[playerUserId][statName] + value
			end
			--print(tostring(statName) .. "'s new value is: " .. tostring(sessionData[playerUserId][statName]))
			
			if File then 
				UpdateGUIForFile(tostring(File),PlayerDataFile, player, playerUserId, statName, value)
			end
			
			--Client script data management so exploiters cant handle sensitive data
			--Updating where data is stored in ServerStorage (viewed by server scripts)
			for i,file in pairs (PlayerDataFile:FindFirstChild(File):GetChildren()) do
				if file:FindFirstChild(statName) then
					file:FindFirstChild(statName).Value = sessionData[playerUserId][statName]
				end
			end
		end
	else --bool and string values
		sessionData[playerUserId][statName] = value 
		if typeof(sessionData[playerUserId][statName]) == "boolean" then
			if string.find(statName, "Discovered") then
				UpdateTycoonStorage:FireClient(player, tostring(File), statName, value)
			end
			--later stat check for data type efficiency
		end
	end
end

SellItem.OnServerEvent:Connect(function(Player, Menu, item, Percentage)--, Amount)
	local playerUserId = game.Players:FindFirstChild(tostring(Player)).UserId
	
	local Item = game.ReplicatedStorage:FindFirstChild(tostring(Menu)):FindFirstChild(item)
	local ItemWorth = tonumber(Item.CurrencyValue.Value)
	local Amount = math.ceil(Percentage * sessionData[playerUserId]["TycoonStorage" .. tostring(Item)])
	local SellAmount = Amount*ItemWorth
	
	print("Selling " .. tostring(Amount) .. " " .. tostring(Item) .. "'s for $" .. tostring(SellAmount))
	
	PlayerStatManager:ChangeStat(Player, "Currency", SellAmount, "Currencies", true) --Update Currency
	PlayerStatManager:ChangeStat(Player, "TycoonStorage" .. tostring(Item), -Amount, "TycoonStorage")
end)

DepositInventory.OnServerEvent:Connect(function(Player)
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(Player.UserId))
	for i,folder in pairs (PlayerDataFile.Inventory:GetChildren()) do
		for i,item in pairs (folder:GetChildren()) do
			local InventoryValue = item.Value --the value of the item is one more than the actual value
			--print(item, InventoryValue)
			if InventoryValue > 0 then
				--Update Inventory
				PlayerStatManager:ChangeStat(Player, tostring(item), 0, "Inventory", nil, "Zero")
				item.Value = 0
				
				--Update Storage
				PlayerStatManager:ChangeStat(Player, "TycoonStorage" .. tostring(item), InventoryValue, "TycoonStorage")
				print(PlayerDataFile.Inventory:FindFirstChild(tostring(folder)):FindFirstChild(tostring(item)).Value)
				
				--Call Inventory to Wipe Previous Pages and Tiles
				DepositInventory:FireClient(Player)
			end
		end
	end

	return true
end)

local function FindPlayerData(JoinedPlayer)
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(JoinedPlayer.UserId))
	--local PlayerCash = PlayerDataFile:FindFirstChild("Currencies"):FindFirstChild("Currency")
	local playerUserId = game.Players:FindFirstChild(tostring(JoinedPlayer)).UserId
	
	local success,data = pcall(function()
		return PlayerSave:GetAsync(playerUserId) --Get save saved as playerUserId
	end)
	
	if success then
		--print(success)
		wait(5) --Allow tycoon to be categorized
		if data then --load data
			print("DataStore was Accessed for " .. JoinedPlayer.Name .. " (" .. tostring(JoinedPlayer.UserId) .. ")")
			sessionData[playerUserId] = data
			
			local PlayerCash = LoadPlayerData(PlayerDataFile,data,JoinedPlayer)
			
			SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
			
		else --New player
			print(tostring(JoinedPlayer) .. " is a new player!")
			sessionData[playerUserId] = {} --No data, so sessiondata is empty
			--SetupPlayerData(JoinedPlayer, PlayerDataFile, playerUserId)
			local PlayerCash = LoadPlayerData(PlayerDataFile,sessionData[playerUserId],JoinedPlayer)
			SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
		end		
	else
		warn("Couldn't Get or Set-Up Player Data For " .. tostring(JoinedPlayer))
	end		
end

--local IsThereNewData = false
local function CheckSaveData(Save)
	if not Save then
		return false
	else
		return true
	end
end

local function ImportSaveData(data,SaveCheck,Folder,Stat)
	if SaveCheck == false then
		if typeof(Stat) == "number" then
			Stat.Value = 0
		else
			Stat.Value = false
		end
	end
	for i,v in pairs (Folder:GetChildren()) do
		if data[tostring(v)] == nil then
			data[tostring(v)] = Stat.Value --placeholder value to create (even if not interacted with yet)
		else
			v.Value = data[tostring(v)]
		end
		--print(v,v.Value,data[tostring(v)])
	end
end

local function CreateSaveFolder(ParentFolder, FolderName)
	local NewFolder = Instance.new("Folder",ParentFolder)
	NewFolder.Name = FolderName
	return NewFolder
end

function LoadPlayerData(PlayerDataFile,data,JoinedPlayer)
	print("Loading player data")
	local playerUserId = game.Players:FindFirstChild(tostring(JoinedPlayer)).UserId
	local DataMenu = JoinedPlayer.PlayerGui:WaitForChild("DataMenu"):WaitForChild("DataMenu")
	local InventoryGui = DataMenu.InventoryMenu
	
	local PlayerInventory = CreateSaveFolder(PlayerDataFile, "Inventory")
	--local OresFolder = CreateSaveFolder(PlayerInventory, "Ores")
	
	local TycoonStorageFolder = CreateSaveFolder(PlayerDataFile, "TycoonStorage")	
	--local TycoonStorageOres = CreateSaveFolder(TycoonStorageFolder, "TycoonStorageOres")	

	
	local PlayerExperience = CreateSaveFolder(PlayerDataFile, "Experience") --Skills, Stats, Reputation
	local SkillsFolder = CreateSaveFolder(PlayerExperience, "Skills")
	
	local PlayerStatItems = CreateSaveFolder(PlayerDataFile, "Player")
	local EquippedItems = CreateSaveFolder(PlayerStatItems, "Equipped")
	local BagsFolder = CreateSaveFolder(PlayerStatItems, "Bags") --Chagne to PlayerStatItems as parent folder
	
	--*Write a function that handles the i,v in pairs for importing save data (Will clean code for readability)*	
	local RealSkills = game.ReplicatedStorage:WaitForChild("Skills")
	for i,skill in pairs (RealSkills:GetChildren()) do
		local Skill = Instance.new("IntValue",SkillsFolder)
		Skill.Name = tostring(skill)
		
		local SavedValue = CheckSaveData(data[tostring(skill)])
		ImportSaveData(data,SavedValue,SkillsFolder,Skill)
		--print("Data for " .. tostring(Skill) .. " is " .. tostring(data[tostring(skill)]))
		
		--Make skill tiles acquired
		UpdateInventory:FireClient(JoinedPlayer, tostring(Skill), SkillsFolder.Name, tostring(data[tostring(Skill)]), nil, "Experience", nil, "Skills")
	end

	--All Ore Data (go through all ores and check bag, if save folder not made yet, make one and put it in the folder, then continue)
	local RealOres = game.ReplicatedStorage:WaitForChild("Ores")
	for i,item in pairs (RealOres:GetChildren()) do --change to mine materials (no longer sorted by type in RS, rather location purposes
		local AssociatedBag = item.Bag.Value
		local ItemType = string.gsub(AssociatedBag, "Bag", "") .. "s"
		
		local AssociatedFolder
		if PlayerInventory:FindFirstChild(ItemType) then --make this a check folder existence function (utility section at end or start of code?)
			AssociatedFolder = PlayerInventory:FindFirstChild(ItemType)
		else
			AssociatedFolder = CreateSaveFolder(PlayerInventory, ItemType)
		end
			
		--local OresFolder = CreateSaveFolder(PlayerInventory, "Ores")
		local Item = Instance.new("IntValue",AssociatedFolder)
		Item.Name = tostring(item)
		local ItemDiscovery = Instance.new("BoolValue",Item)
		ItemDiscovery.Name = tostring(Item) .. "Discovered"
		
		local AssociatedItemStorage
		if TycoonStorageFolder:FindFirstChild("TycoonStorage" .. ItemType) then --include in check existence function
			AssociatedItemStorage = TycoonStorageFolder:FindFirstChild("TycoonStorage" .. ItemType)
		else
			AssociatedItemStorage = CreateSaveFolder(TycoonStorageFolder, "TycoonStorage" .. ItemType)
		end
		
		local TycoonStorageItem = Instance.new("IntValue", AssociatedItemStorage) 
		--must create folder for tycoon storage
		--local TycoonStorageOre = Instance.new("IntValue",TycoonStorageOres)
		TycoonStorageItem.Name = "TycoonStorage" .. tostring(item)
		
		local SavedValue = CheckSaveData(data[tostring(item)])
		ImportSaveData(data,SavedValue,AssociatedFolder,Item)
		--print("Data for " .. tostring(Ore) .. " is " .. tostring(data[tostring(Ore)]))
		UpdateInventory:FireClient(JoinedPlayer, tostring(Item), AssociatedFolder.Name, tostring(data[tostring(Item)]), nil, "Inventory", nil, tostring(RealOres))

		local SavedDiscoverValue = CheckSaveData(data[tostring(ItemDiscovery)])
		ImportSaveData(data,SavedDiscoverValue,Item,ItemDiscovery)
		UpdateTycoonStorage:FireClient(JoinedPlayer, AssociatedFolder.Name, tostring(Item) .. "Discovered", data[tostring(ItemDiscovery)], nil, tostring(RealOres))
		
		local SavedTycoonStorageValue = CheckSaveData(data[tostring(TycoonStorageItem)])
		ImportSaveData(data,SavedTycoonStorageValue,AssociatedItemStorage,TycoonStorageItem)
		UpdateTycoonStorage:FireClient(JoinedPlayer, AssociatedItemStorage.Name, tostring(TycoonStorageItem), tostring(data[tostring(TycoonStorageItem)]), nil, tostring(RealOres))   
	end	
	
	--All Bag Data
	local RealBags = game.ReplicatedStorage.Equippable:WaitForChild("Bags")
	for i,bagtype in pairs (RealBags:GetChildren()) do --Way to make this more efficient?
		--Create bags in equipped folder so scripts can read what bag the player is using current, rather than all bag values
		local EquippedBag = Instance.new("StringValue", EquippedItems)
		EquippedBag.Name = tostring(bagtype)
		local NewBagTypeFolder = Instance.new("Folder",BagsFolder)
		NewBagTypeFolder.Name = tostring(bagtype)

		local BestPurchasedBag
		for i,bag in pairs (bagtype:GetChildren()) do
			local Bag = Instance.new("BoolValue",NewBagTypeFolder) --true if purchased
			Bag.Name = tostring(bag)

			if i == 1 then --Start BestBag as beginner bag to compare with
				BestPurchasedBag = tostring(bag)
				Bag.Value = true
				data[tostring(bag)] = true
			end

			local SavedValue = CheckSaveData(data[tostring(bag)])
			ImportSaveData(data,SavedValue,NewBagTypeFolder,Bag)

			--List all purchased in case save overwrite goes wrong; otherwise, error may cause bag restart
			--Check bag and auto-equip best bag when player joins game
			--Where to exclaim what bag is equipped? (Number value in inventory as well...)
			--Equipped folder efficieny for quick check of stats during activities

			if SavedValue == true and i > 1 then --Owned and not beginner bag
				local BestBagValue = RealBags:FindFirstChild(tostring(bagtype)):FindFirstChild(tostring(BestPurchasedBag)).Value
				if bag.Value > BestBagValue then
					BestPurchasedBag = tostring(bag)
				end
			end

			if i == #bagtype:GetChildren() then
				EquippedBag.Value = BestPurchasedBag
			end
		end

		--Update Inventory Menus' Attributes
		local BestBagValue = RealBags:FindFirstChild(tostring(bagtype)):FindFirstChild(tostring(BestPurchasedBag)).Value
		local MenuName = string.gsub(tostring(bagtype), "Bag", "") .. "Menu"
		DataMenu:WaitForChild("InventoryMenu"):FindFirstChild(MenuName):SetAttribute("BagCapacity", BestBagValue)

		local ItemCount = PlayerStatManager:getItemTypeCount(JoinedPlayer, string.gsub(tostring(bagtype), "Bag", ""))
		DataMenu:WaitForChild("InventoryMenu"):FindFirstChild(MenuName):SetAttribute("ItemCount", ItemCount)
	end
	
	local CurrencyFolder = Instance.new("Folder",PlayerDataFile)
	CurrencyFolder.Name = "Currencies"
	local UniversalCurrency = Instance.new("Folder",CurrencyFolder)
	UniversalCurrency.Name = "UniversalCurrencies"
	local Currency = Instance.new("NumberValue",UniversalCurrency)
	Currency.Name = "Currency"
	local PlayerCash = UniversalCurrency:FindFirstChild("Currency")
	
	local SavedValue = CheckSaveData(data[tostring("Currency")])
	if SavedValue == false then
		PlayerCash.Value = 0
		data[tostring("Currency")] = PlayerCash.Value
	else
		PlayerCash.Value = PlayerCash.Value + data[tostring("Currency")]
	end
	print(tostring(JoinedPlayer) .. " has $" .. tostring(data["Currency"]))
	
	return PlayerCash
end

function SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
	for i = 1,#tycoons,1 do 
		local PurchaseHandler = require(tycoons[i]:WaitForChild("PurchaseHandler"))
		local data = sessionData[playerUserId]
		
		--Set-up Entrance Save
		local Entrance = tycoons[i].Entrance.Name
		if data[Entrance] == nil then
			print("Setting Entrance to false1")
			data[Entrance] = false
		end
		
		for key,_ in pairs(PurchaseHandler) do
			if data[key] == nil then --if a value of the object hasn't been placed in player's sessiondata,
				--Make one, and set it equal to false (so it can be set to true later)
				--print(key) --= displays names of items that can be bought (NOT BUTTON NAMES)
				data[key] = false --Set the objects as not bought
			end
		end	
		
		Utility:UpdateMoneyDisplay(JoinedPlayer, Utility:ConvertShort(PlayerCash.Value))
	end
end

function savePlayerData(playerUserId)
	if sessionData[playerUserId] then --if there is a sessiondata value with the player's userid...
		local success = pcall(function() --Check to make sure it is saving
			PlayerSave:SetAsync(playerUserId, sessionData[playerUserId]) --save sessionData[playerUserId] as playerUserId
			print(playerUserId .. "'s held data was SAVED!")
			--playerUserId = string (key), and sessionData[playerUserId] = variant (value of given key)
		end)
		if not success then
			warn("Cannot save data for " .. tostring(playerUserId))
		end
	end
end

--[[ (REMOVED BECAUSE SAVED ALL PREVIOUS PLAYER'S DATA AS WELL)
local function saveAllPlayerData() --maybe make a getchildren statement? and save for all children?
		for playerUserId, _ in pairs(sessionData) do --Call for every player thats ever been in game
			savePlayerData(playerUserId) --Save
			print(playerUserId .. "'s held data was saved!")
		end
	end
]]

function PlayerStatManager:getPlayerData(player)
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	return sessionData[playerUserId]
end 

function PlayerStatManager:getStat(player, statName) --Stat Check
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	--print(sessionData[playerUserId][statName],statName,playerUserId)
	return sessionData[playerUserId][statName]
end 

function PlayerStatManager:getItemTypeCount(player, Type) --For Amount in Inventory Bag Checking
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	local TypeSaveFolder = game.ServerStorage.PlayerData:FindFirstChild(tostring(playerUserId)).Inventory:FindFirstChild(Type)
	
	if TypeSaveFolder then
		local Amount = 0
		for i,statData in pairs (TypeSaveFolder:GetChildren()) do
			Amount = Amount + statData.Value
		end
		return Amount
	end
end

function PlayerStatManager:getEquippedData(player, Equippable, Type)
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	local EquippedItem = game.ServerStorage.PlayerData:FindFirstChild(tostring(playerUserId)).Player.Equipped:FindFirstChild(Equippable)
	
	if EquippedItem then
		local EquipmentName = EquippedItem.Value
		local EquipmentStats = game.ReplicatedStorage.Equippable:FindFirstChild(Type):FindFirstChild(Equippable):FindFirstChild(EquipmentName)
		
		return EquipmentStats
	end
end

function PlayerStatManager:initiateSaving(player, statName, value)
	print("Saving Data for player: " .. tostring(player))
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	--if typeof(sessionData[playerUserId][statName]) == "number" and statName ~= "Currency" then
	--sessionData[playerUserId][statName] = sessionData[playerUserId][statName] + value
	--else
	sessionData[playerUserId][statName] = value --data["Currency"] in FindPlayerData
	--end
	
	print("Money: " .. tostring(sessionData[playerUserId]["Currency"]))
	savePlayerData(playerUserId) --After saving money amount, update datastore for other stats!
	--Other stats include purhcases, inventory, etc.
end

game.Players.PlayerAdded:Connect(FindPlayerData)


return PlayerStatManager
