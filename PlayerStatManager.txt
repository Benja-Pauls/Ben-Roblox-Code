(ModuleScript)
Handles all saving that occurs. Any true saving (ROBLOX data store assigning)
-------------------------------------------------------------------------------------------------------------------------------------------------
local PlayerStatManager = {}

local tycoons = game.Workspace["Tycoon Game"]:WaitForChild("Tycoons"):GetChildren()

local serverStorage = game:GetService("ServerStorage")
local PlayerData = serverStorage:FindFirstChild("PlayerData")
local DataStoreService = game:GetService("DataStoreService") 
local Utility = require(game.ServerScriptService:WaitForChild("Utility"))
local UpdateInventory = game.ReplicatedStorage.Events.GUI:WaitForChild("UpdateInventory")
local UpdateTycoonStorage = game.ReplicatedStorage.Events.GUI:WaitForChild("UpdateTycoonStorage")
local DepositInventory = game.ReplicatedStorage.Events.Utility:WaitForChild("DepositInventory")
local SellItem = game.ReplicatedStorage.Events.Utility:WaitForChild("SellItem")

local PlayerSave = DataStoreService:GetDataStore("Tycoon Test190") --Changing this will change the datastore info is taken from

local sessionData = {}

local function UpdateGUIForFile(DataTabName, PlayerDataFile, player, playerUserId, statName, value)
	local DataTab = PlayerDataFile:FindFirstChild(DataTabName) --Example: (UserId).Experience
	for i,file in pairs (DataTab:GetChildren()) do
		if file:FindFirstChild(tostring(statName)) then --DataTab:FindFirstChild(file):FindFirstChild(statName)?
			local total = sessionData[playerUserId][statName]
			local amountAdded = value
			
			if tostring(DataTabName) == "Inventory" or tostring(DataTabName) == "Experience" then
				UpdateInventory:FireClient(player, statName, tostring(file), tostring(total), amountAdded, tostring(DataTab))
				
			elseif tostring(DataTabName) == "TycoonStorage" then
				UpdateTycoonStorage:FireClient(player, tostring(file), statName, tostring(total), amountAdded)
				
			elseif tostring(DataTabName) == "Currencies" then
				local RScurrency = game.ReplicatedStorage.Currencies:FindFirstChild(statName)
				Utility:UpdateMoneyDisplay(player, PlayerStatManager:ConvertShort(total))
				UpdateInventory:FireClient(player, statName, tostring(DataTab), nil, amountAdded, "Inventory", RScurrency.Value)
				--(put inventory for parameter so popup shows up; otherwise, leave nil.)
			end
		end
	end
end

--Change saved stat to new value
function PlayerStatManager:ChangeStat(player, statName, value, File, Currency, special)
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(playerUserId))
	
	--print(typeof(sessionData[playerUserId][statName]),typeof(value),statName,sessionData[playerUserId][statName])	
	assert(typeof(sessionData[playerUserId][statName]) == typeof(value), tostring(player) .. "'s saved value types don't match")
	if typeof(sessionData[playerUserId][statName]) == "number" then
		if sessionData[playerUserId][statName] ~= sessionData[playerUserId][statName] + value or special then --if changed	
			if special == "Zero" then
				print("Zeroing " .. tostring(statName))
				sessionData[playerUserId][statName] = 0
			else
				sessionData[playerUserId][statName] = sessionData[playerUserId][statName] + value
			end
			--print(tostring(statName) .. "'s new value is: " .. tostring(sessionData[playerUserId][statName]))
			
			if File then 
				UpdateGUIForFile(tostring(File),PlayerDataFile, player, playerUserId, statName, value)
			end
			
			--Client script data management so exploiters cant handle sensitive data
			--Updating where data is stored in ServerStorage (viewed by server scripts)
			for i,file in pairs (PlayerDataFile:FindFirstChild(File):GetChildren()) do
				if file:FindFirstChild(statName) then
					file:FindFirstChild(statName).Value = sessionData[playerUserId][statName]
				end
			end
		end
	else --bool and string values
		sessionData[playerUserId][statName] = value 
		if typeof(sessionData[playerUserId][statName]) == "boolean" then
			if string.find(statName, "Discovered") then
				UpdateTycoonStorage:FireClient(player, tostring(File), statName, value)
			end
			--later stat check for data type efficiency
		end
	end
end

SellItem.OnServerEvent:Connect(function(Player, Item, Amount)
	local ItemWorth = tonumber(Item.CurrencyValue.Value)
	local SellAmount = Amount*ItemWorth
	
	print("Selling " .. tostring(Amount) .. " " .. tostring(Item) .. "'s for $" .. tostring(SellAmount))
	
	PlayerStatManager:ChangeStat(Player, "Currency", SellAmount, "Currencies", true) --Update Currency
	PlayerStatManager:ChangeStat(Player, "TycoonStorage" .. tostring(Item), -Amount, "TycoonStorage")
end)

DepositInventory.OnServerEvent:Connect(function(Player)
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(Player.UserId))
	for i,folder in pairs (PlayerDataFile.Inventory:GetChildren()) do
		for i,item in pairs (folder:GetChildren()) do
			local InventoryValue = item.Value --the value of the item is one more than the actual value
			--print(item, InventoryValue)
			if InventoryValue > 0 then
				--Update Inventory
				PlayerStatManager:ChangeStat(Player, tostring(item), 0, "Inventory", nil, "Zero")
				item.Value = 0
				
				--Update Storage
				PlayerStatManager:ChangeStat(Player, "TycoonStorage" .. tostring(item), InventoryValue, "TycoonStorage")
				print(PlayerDataFile.Inventory:FindFirstChild(tostring(folder)):FindFirstChild(tostring(item)).Value)
				
				--Call Inventory to Wipe Previous Pages and Tiles
				DepositInventory:FireClient(Player)
			end
		end
	end

	return true
end)

local function FindPlayerData(JoinedPlayer)
	local PlayerDataFile = PlayerData:FindFirstChild(tostring(JoinedPlayer.UserId))
	--local PlayerCash = PlayerDataFile:FindFirstChild("Currencies"):FindFirstChild("Currency")
	local playerUserId = game.Players:FindFirstChild(tostring(JoinedPlayer)).UserId
	
	local success,data = pcall(function()
		return PlayerSave:GetAsync(playerUserId) --Get save saved as playerUserId
	end)
	
	if success then
		--print(success)
		wait(5) --Allow tycoon to be categorized
		if data then --load data
			print("DataStore was Accessed for " .. JoinedPlayer.Name .. " (" .. tostring(JoinedPlayer.UserId) .. ")")
			sessionData[playerUserId] = data
			
			local PlayerCash = LoadPlayerData(PlayerDataFile,data,JoinedPlayer)
			
			SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
			
		else --New player
			print(tostring(JoinedPlayer) .. " is a new player!")
			sessionData[playerUserId] = {} --No data, so sessiondata is empty
			--SetupPlayerData(JoinedPlayer, PlayerDataFile, playerUserId)
			local PlayerCash = LoadPlayerData(PlayerDataFile,sessionData[playerUserId],JoinedPlayer)
			SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
		end		
	else
		warn("Couldn't Get or Set-Up Player Data For " .. tostring(JoinedPlayer))
	end		
end

--local IsThereNewData = false
local function CheckSaveData(Save)
	if not Save then
		return false
	else
		return true
	end
end

local function ImportSaveData(data,SaveCheck,Folder,Stat)
	if SaveCheck == false then
		if typeof(Stat) == "number" then
			Stat.Value = 0
		else
			Stat.Value = false
		end
	end
	for i,v in pairs (Folder:GetChildren()) do
		if data[tostring(v)] == nil then
			data[tostring(v)] = Stat.Value --0
		else
			v.Value = data[tostring(v)]
		end
		--print(v,v.Value,data[tostring(v)])
	end
end

function LoadPlayerData(PlayerDataFile,data,JoinedPlayer)
	print("Loading player data")
	local playerUserId = game.Players:FindFirstChild(tostring(JoinedPlayer)).UserId
	local DataMenu = JoinedPlayer.PlayerGui:WaitForChild("DataMenu"):WaitForChild("DataMenu")
	local InventoryGui = DataMenu.InventoryMenu
	
	--Make it so changing the money display value text isn't several times of code (changed function)
	local PlayerInventory = Instance.new("Folder",PlayerDataFile)
	PlayerInventory.Name = "Inventory"
	local OresFolder = Instance.new("Folder",PlayerInventory)
	local OreInventoryMenu = InventoryGui:WaitForChild("OresMenu")
	OresFolder.Name = "Ores"
	
	local TycoonStorageFolder = Instance.new("Folder",PlayerDataFile)
	TycoonStorageFolder.Name = "TycoonStorage"
	local TycoonStorageOres = Instance.new("Folder",TycoonStorageFolder)
	TycoonStorageOres.Name = "TycoonStorageOres"
	
	local PlayerExperience = Instance.new("Folder",PlayerDataFile) --Skills, Stats, Reputation
	PlayerExperience.Name = "Experience"
	local SkillsFolder = Instance.new("Folder",PlayerExperience)
	SkillsFolder.Name = "Skills"
	
	local PlayerStatItems = Instance.new("Folder",PlayerDataFile)
	PlayerStatItems.Name = "Player"
	local BagsFolder = Instance.new("Folder",PlayerDataFile)
	BagsFolder.Name = "Bags"
	
	--Write a function that handles the i,v in pairs for importing save data (Will clean code for readability)
	
	local RealBags = game.ReplicatedStorage:WaitForChild("Bags")
	for i,bag in pairs (RealBags:GetChildren()) do
		local Bag = Instance.new("IntValue",BagsFolder)
		Bag.Name = tostring(bag)
		
		local SavedValue = CheckSaveData(data[tostring(bag)])
		ImportSaveData(data,SavedValue,BagsFolder,Bag)
		
		--Update Player menu with bag information or ore menu with limit number
	end
	
	local RealSkills = game.ReplicatedStorage:WaitForChild("Skills")
	for i,skill in pairs (RealSkills:GetChildren()) do
		local Skill = Instance.new("IntValue",SkillsFolder)
		Skill.Name = tostring(skill)
		
		local SavedValue = CheckSaveData(data[tostring(skill)])
		ImportSaveData(data,SavedValue,SkillsFolder,Skill)
		--print("Data for " .. tostring(Skill) .. " is " .. tostring(data[tostring(skill)]))
		
		--Make skill tiles acquired
		UpdateInventory:FireClient(JoinedPlayer, tostring(Skill), SkillsFolder.Name, tostring(data[tostring(Skill)]), nil, "Experience")
	end

	--All Ore Data
	local RealOres = game.ReplicatedStorage:WaitForChild("Ores")
	for i,ore in pairs (RealOres:GetChildren()) do
		-- Reason to make interior of this for i,v a function when more data is added?
		local Ore = Instance.new("IntValue",OresFolder)
		Ore.Name = tostring(ore)
		local OreDiscovery = Instance.new("BoolValue",Ore)
		OreDiscovery.Name = tostring(Ore) .. "Discovered"
		local TycoonStorageOre = Instance.new("IntValue",TycoonStorageOres)
		TycoonStorageOre.Name = "TycoonStorage" .. tostring(ore)
		
		local SavedValue = CheckSaveData(data[tostring(ore)])
		ImportSaveData(data,SavedValue,OresFolder,Ore)
		--print("Data for " .. tostring(Ore) .. " is " .. tostring(data[tostring(Ore)]))
		UpdateInventory:FireClient(JoinedPlayer, tostring(Ore), OresFolder.Name, tostring(data[tostring(Ore)]), nil,"Inventory")

		local SavedDiscoverValue = CheckSaveData(data[tostring(OreDiscovery)])
		ImportSaveData(data,SavedDiscoverValue,Ore,OreDiscovery)
		UpdateTycoonStorage:FireClient(JoinedPlayer, OresFolder.Name, tostring(Ore) .. "Discovered", data[tostring(OreDiscovery)])
		
		local SavedTycoonStorageValue = CheckSaveData(data[tostring(TycoonStorageOre)])
		ImportSaveData(data,SavedTycoonStorageValue,TycoonStorageOres,TycoonStorageOre)
		UpdateTycoonStorage:FireClient(JoinedPlayer, TycoonStorageOres.Name, tostring(TycoonStorageOre), tostring(data[tostring(TycoonStorageOre)]))
	end	
	
	local CurrencyFolder = Instance.new("Folder",PlayerDataFile)
	CurrencyFolder.Name = "Currencies"
	local UniversalCurrency = Instance.new("Folder",CurrencyFolder)
	UniversalCurrency.Name = "UniversalCurrencies"
	local Currency = Instance.new("NumberValue",UniversalCurrency)
	Currency.Name = "Currency"
	local PlayerCash = UniversalCurrency:FindFirstChild("Currency")
	
	local SavedValue = CheckSaveData(data[tostring("Currency")])
	if SavedValue == false then
		PlayerCash.Value = 0
		data[tostring("Currency")] = PlayerCash.Value
	else
		PlayerCash.Value = PlayerCash.Value + data[tostring("Currency")]
	end
	print(tostring(JoinedPlayer) .. " has $" .. tostring(data["Currency"]))
	
	return PlayerCash
end

function SetTycoonPurchases(JoinedPlayer, PlayerCash, playerUserId)
	for i = 1,#tycoons,1 do 
		local PurchaseHandler = require(tycoons[i]:WaitForChild("PurchaseHandler"))
		local data = sessionData[playerUserId]
		
		--Set-up Entrance Save
		local Entrance = tycoons[i].Entrance.Name
		if data[Entrance] == nil then
			print("Setting Entrance to false1")
			data[Entrance] = false
		end
		
		for key,_ in pairs(PurchaseHandler) do
			if data[key] == nil then --if a value of the object hasn't been placed in player's sessiondata,
				--Make one, and set it equal to false (so it can be set to true later)
				--print(key) --= displays names of items that can be bought (NOT BUTTON NAMES)
				data[key] = false --Set the objects as not bought
			end
		end	
		
		Utility:UpdateMoneyDisplay(JoinedPlayer, PlayerStatManager:ConvertShort(PlayerCash.Value))
	end
end

function savePlayerData(playerUserId)
	if sessionData[playerUserId] then --if there is a sessiondata value with the player's userid...
		local success = pcall(function() --Check to make sure it is saving
			PlayerSave:SetAsync(playerUserId, sessionData[playerUserId]) --save sessionData[playerUserId] as playerUserId
			print(playerUserId .. "'s held data was SAVED!")
			--playerUserId = string (key), and sessionData[playerUserId] = variant (value of given key)
		end)
		if not success then
			warn("Cannot save data for " .. tostring(playerUserId))
		end
	end
end

--[[ (REMOVED BECAUSE SAVED ALL PREVIOUS PLAYER'S DATA AS WELL)
local function saveAllPlayerData() --maybe make a getchildren statement? and save for all children?
		for playerUserId, _ in pairs(sessionData) do --Call for every player thats ever been in game
			savePlayerData(playerUserId) --Save
			print(playerUserId .. "'s held data was saved!")
		end
	end
]]

function PlayerStatManager:getPlayerData(player)
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	return sessionData[playerUserId]
end 

function PlayerStatManager:getStat(player, statName) --Stat Check
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	--print(sessionData[playerUserId][statName],statName,playerUserId)
	return sessionData[playerUserId][statName]
end 

function PlayerStatManager:getStatForType(player, Type) --For Amount in Inventory Bag Checking
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	local TypeSaveFolder = game.ServerStorage.PlayerData:FindFirstChild(tostring(playerUserId)).Inventory:FindFirstChild(Type)
	
	if TypeSaveFolder then
		local Amount = 0
		for i,statData in pairs (TypeSaveFolder:GetChildren()) do
			Amount = Amount + statData.Value
		end
		return Amount
	end
end

function PlayerStatManager:initiateSaving(player, statName, value)
	print("Saving Data for player: " .. tostring(player))
	local playerUserId = game.Players:FindFirstChild(tostring(player)).UserId
	--if typeof(sessionData[playerUserId][statName]) == "number" and statName ~= "Currency" then
	--sessionData[playerUserId][statName] = sessionData[playerUserId][statName] + value
	--else
	sessionData[playerUserId][statName] = value --data["Currency"] in FindPlayerData
	--end
	
	print("Money: " .. tostring(sessionData[playerUserId]["Currency"]))
	savePlayerData(playerUserId) --After saving money amount, update datastore for other stats!
	--Other stats include purhcases, inventory, etc.
end

game.Players.PlayerAdded:Connect(FindPlayerData)

--Shortens numbers (Change so isn't only one number after decimal, change to at least 2 after)
function PlayerStatManager:ConvertShort(Filter_Num) --MOVE TO UTILITY?
	--print(Filter_Num) = money amount player has in total
	local x = tostring(Filter_Num)
	--print(x) = money amount player has in total
	if #x>=10 then
		local important = (#x-9)
		return x:sub(0,(important)).."."..(x:sub(#x-7,(#x-7))).."B"
	elseif #x>=7 then
		local important = (#x-6)
		return x:sub(0,(important)).."."..(x:sub(#x-5,(#x-5))).."M"
		--elseif #x>=4 then
		--local important = (#x-3)
		--print(tostring(x:sub(x:sub(#x-2,(#x-2)))))
		--return x:sub(0,(important)).."."..(x:sub(#x-2,(#x-2))).."K"
	else
		return Filter_Num
	end
end

return PlayerStatManager
