(LocalScript)
Inventory graphical menu handler

-------------------------------------------------------------------------------------------------------------------------------------------------
local Player = game.Players.LocalPlayer
local OpenDataMenuButton = script.Parent.OpenDataMenuButton
local DataMenu = script.Parent.DataMenu
local MoveAllBaseScreenUI = game.ReplicatedStorage.Events.GUI.MoveAllBaseScreenUI
local TweenService = game:GetService("TweenService")
local GuiElements = game.ReplicatedStorage.GuiElements
local PageManager = DataMenu.PageManager

for i,v in pairs (DataMenu:GetChildren()) do
	if v:IsA("Frame") and tostring(v) ~= "TopTabBar" then
		v.Visible = false
	end
end

local Open = false
local InventoryOpens = 0
OpenDataMenuButton.Activated:Connect(function()
	if Open == false then
		DataMenu.Visible = true
		Open = true
		if InventoryOpens == 0 then
			InventoryOpens = 1
			ReadyMenuButtons(DataMenu) --Manage Tabs
		else
			CleanupMenuTabs(DataMenu)
		end
		
	elseif Open == true then
		DataMenu.Visible = false
		Open = false
		PageManager.Visible = false
		DataMenu.ItemViewer.Visible = false
	end
end)

MoveAllBaseScreenUI.Event:Connect(function(ChangeTo)
	DataMenu.Visible = false
	Open = false
	if ChangeTo == "Hide" then
		OpenDataMenuButton:TweenPosition(UDim2.new(-.1, 0, OpenDataMenuButton.Position.Y.Scale, 0), "Out", "Quint", 1)
	else
		OpenDataMenuButton:TweenPosition(UDim2.new(0.017, 0, 0.695, 0), "Out", "Quint", 1)
	end
end)

--------------<|Utility Functions|>-----------------------------------------------------------------------------
local ItemViewerOpen = false
local PageDebounce = false
local ButtonPresses = {}

local MenuAcceptance = true
function ReadyMenuButtons(Menu)
	if MenuAcceptance == true then
		MenuAcceptance = false
		for i,button in pairs(Menu:GetChildren()) do
			if button:IsA("TextButton") and button:FindFirstChild("Menu") then
				ButtonPresses[button] = 0
				local AssociatedMenuName = button:FindFirstChild("Menu").Value
				local ButtonMenu = Menu:FindFirstChild(AssociatedMenuName)
				ButtonMenu.Visible = false
				
				button.Activated:Connect(function()
					DataMenu.InventoryMenu.EmptyNotifier.Visible = false
					print(tostring(button) .. " has been activated")
					for i,v in pairs (ButtonMenu.Parent:GetChildren()) do
						if not v:IsA("TextButton") and not v:FindFirstChild("Menu") and tostring(v) ~= "TopTabBar" then
							v.Visible = false
						end
					end
					ButtonMenu.Visible = true
					if Menu.Parent == DataMenu then
						PageManager.Menu.Value = ButtonMenu
						local PageCount = CountPages()
						if PageCount > 0 then
							PageManager.Visible = true
							if ButtonMenu:FindFirstChild("Page1") then
								FinalizePageChange(ButtonMenu.Page1)
							end
						else --Player has no items of this type
							print("Menu has no pages!")
							DataMenu.InventoryMenu.EmptyNotifier.Visible = true
						end
					else
						--PageManager.Menu.Value = nil
						PageManager.Visible = false
					end
					DataMenu.ItemViewer.Visible = false
					ItemViewerOpen = false
					PageManager.CurrentPage.Value = 1
					if ButtonPresses[button] == 0 then
						ButtonPresses[button] = 1
						ReadyMenuButtons(ButtonMenu)
					else
						CleanupMenuTabs(ButtonMenu)
					end
				end)
			end
		end
		wait(.1)
		MenuAcceptance = true
	else
		--cancellation of other menus, way to count this so wait waits for a certain number to
		--be achieved here?
	end
end

function CleanupMenuTabs(Menu)
	for i,button in pairs(Menu:GetChildren()) do
		if button:IsA("TextButton") and button:FindFirstChild("Menu") then
			local AssociatedMenuName = button:FindFirstChild("Menu").Value
			local ButtonMenu = Menu:FindFirstChild(AssociatedMenuName)
			ButtonMenu.Visible = false
		end
	end
end

local function GetStatImage(File, Stat)
	local ImageId
	if Stat.Name then
		ImageId = game.ReplicatedStorage:FindFirstChild(tostring(File)):FindFirstChild(Stat.Name)["GUI Info"].InventoryImage.Value
	else
		ImageId = game.ReplicatedStorage:FindFirstChild(tostring(File)):FindFirstChild(Stat)["GUI Info"].InventoryImage.Value
	end
	return ImageId
end

local function FindStatLevel(StatInfo, EXPValue)
	local CurrentLevel = 0
	for i,level in pairs (StatInfo.Levels:GetChildren()) do
		if tonumber(EXPValue) >= level.Value and tonumber(level.Name) > CurrentLevel then
			CurrentLevel = tonumber(level.Name)
		end
	end
	local NextLevel
	if StatInfo.Levels:FindFirstChild(tostring(CurrentLevel + 1)) then
		NextLevel = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel + 1))
	else
		NextLevel = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel))
	end
	return CurrentLevel,NextLevel
end


--------------<|PageManager Functions|>---------------------------------------------------------------------------------

function ManagePageInvis(VisiblePage) --Use this in more places than page management?
	for i,page in pairs (VisiblePage.Parent:GetChildren()) do
		if page:IsA("Frame") then
			if page ~= VisiblePage then
				page.Visible = false
			else
				page.Visible = true
			end
		end
	end
	VisiblePage.ZIndex -= 1
	PageDebounce = false
end

function CountPages()
	local HighPage = 0
	for i,page in pairs (PageManager.Menu.Value:GetChildren()) do
		if page:IsA("Frame") then
			local PageNumber = string.gsub(page.Name, "Page", "")
			if tonumber(PageNumber) > HighPage then
				HighPage = tonumber(PageNumber)
			end
		end
	end
	return HighPage
end

function FinalizePageChange(Page)
	PageDebounce = true
	local RarityName = Page.Rarity.Value
	if GuiElements.RarityColors:FindFirstChild(RarityName) then
		local Rarity = GuiElements.RarityColors:FindFirstChild(RarityName)
		PageManager.PageRarityDisplay.Text = RarityName .. " " .. string.gsub(PageManager.Menu.Value.Name, "Menu", "")
		PageManager.PageRarityDisplay.TextColor3 = Rarity.Value
		PageManager.PageRarityDisplay.TextStrokeColor3 = Rarity.TileColor.Value
		for i,tile in pairs (Page:GetChildren()) do
			if tile:IsA("TextButton") then
				tile.BackgroundColor3 = Rarity.TileColor.Value
			end
		end
		local ButtonWidth = 0.33
		if PageManager.PageRarityDisplay.Visible == false then
			PageManager.Previous.Size = UDim2.new(ButtonWidth,0,1,0)
			PageManager.Next.Position = UDim2.new(ButtonWidth + 0.005,0,0,0)
			PageManager.Next.Size = UDim2.new(ButtonWidth,0,1,0)
			PageManager.PageRarityDisplay.Visible = true
		end
	else
		--For tiles without rarity distinguishability (no page names)
		local ButtonWidth = 0.502
		if PageManager.PageRarityDisplay.Visible == true then
			PageManager.Previous.Size = UDim2.new(ButtonWidth,0,1,0)
			PageManager.Next.Position = UDim2.new(ButtonWidth + 0.005,0,0,0)
			PageManager.Next.Size = UDim2.new(ButtonWidth,0,1,0)
			PageManager.PageRarityDisplay.Visible = false
		end
	end
	Page.ZIndex += 1
	Page.Visible = true
	Page:TweenPosition(UDim2.new(0,0,0,0), "Out", "Quint", .25)
	wait(.25)
	ManagePageInvis(Page)
end


PageManager.Previous.Activated:Connect(function()
	if PageDebounce == false then
		local HighPage = CountPages()
		local Menu = PageManager.Menu.Value
		if HighPage ~= 1 then --only one page
			local NewPage
			if PageManager.CurrentPage.Value - 1 == 0 then
				NewPage = Menu:FindFirstChild("Page" .. tostring(HighPage))
				PageManager.CurrentPage.Value = HighPage
			else
				NewPage = Menu:FindFirstChild("Page" .. tostring(PageManager.CurrentPage.Value-1))
				PageManager.CurrentPage.Value = PageManager.CurrentPage.Value-1
			end
			
			NewPage.Position = UDim2.new(-1,0,0,0)
			FinalizePageChange(NewPage)
		else --Bounce effect
			PageDebounce = true
			Menu:FindFirstChild("Page1"):TweenPosition(UDim2.new(-.03,0,0,0), "Out", "Quint", .1)
			wait(.1)
			Menu:FindFirstChild("Page1"):TweenPosition(UDim2.new(0,0,0,0), "Out" , "Bounce", .25)
			wait(.25)
			PageDebounce = false
		end
	end
end)

PageManager.Next.Activated:Connect(function()
	if PageDebounce == false then
		local HighPage = CountPages()
		local Menu = PageManager.Menu.Value
		if HighPage ~= 1 then --only one page
			local NewPage
			if PageManager.CurrentPage.Value + 1 > HighPage then
				NewPage = Menu:FindFirstChild("Page1")
				PageManager.CurrentPage.Value = 1
			else
				NewPage = Menu:FindFirstChild("Page" .. tostring(PageManager.CurrentPage.Value+1))
				PageManager.CurrentPage.Value = PageManager.CurrentPage.Value+1
			end
			
			NewPage.Position = UDim2.new(1,0,0,0)
			FinalizePageChange(NewPage)
		else --Bounce effect
			PageDebounce = true
			Menu:FindFirstChild("Page1"):TweenPosition(UDim2.new(.03,0,0,0), "Out", "Quint", .1)
			wait(.1)
			Menu:FindFirstChild("Page1"):TweenPosition(UDim2.new(0,0,0,0), "Out" , "Bounce", .25)
			wait(.25)
			PageDebounce = false
		end
	end
end)

DataMenu.ItemViewer.BackButton.Activated:Connect(function()
	if DataMenu.ItemViewer.Visible == true then
		DataMenu.ItemViewer.Visible = false
		ItemViewerOpen = false
	end
end)

local function FindStatPage(Stat,Menu,MaxAmount,RaritySort)
	local Pages = Menu:GetChildren()
	local StorageName = string.gsub(tostring(Menu), "Menu", "")
	
	local StatRarity
	if RaritySort then
		StatRarity = game.ReplicatedStorage:FindFirstChild(StorageName):FindFirstChild(Stat)["GUI Info"].RarityName.Value
	else
		StatRarity = "No Rarity"
	end
	
	local Slots
	local Page
	local Over
	local SlotCount = 0
	local found = false
	for i,page in pairs (Pages) do	
		if page.Rarity.Value == StatRarity then
			--print("Found existing page for " .. tostring(StatRarity))

			for i,slot in pairs (page:GetChildren()) do
				if slot:IsA("TextButton") then
					SlotCount = SlotCount + 1
				end
			end

			if SlotCount < MaxAmount then
				found = true
				Page = page
			else
				Over = page --Too many tiles on rarity page
			end
		end
	end
	
	if found == false then
		local NewPage = GuiElements.MenuPage:Clone()
		NewPage.Rarity.Value = StatRarity
		if Over then --Group Page With Rarity
			local LastRarityPage = string.gsub(Over.Name, "Page" , "")
			NewPage.Name = "Page" .. tostring(tonumber(LastRarityPage) + 1)
			
		elseif not Over and StatRarity ~= "No Rarity" then --No Page of Rarity Exists, Must Sort Rarities by Order
			--Sort by rarity
			local HighestLowerRarityPage = 0
			
			local RarityOrder = GuiElements.RarityColors:FindFirstChild(StatRarity).Order.Value
			if RarityOrder > 1 then
				for i,rarity in pairs (GuiElements.RarityColors:GetChildren()) do
					if rarity.Order.Value < RarityOrder then
						for i,page in pairs (Pages) do
							if page:IsA("Frame") then
								if page.Rarity.Value == tostring(rarity) then
									local PageNumber = string.gsub(page.Name, "Page" , "")
									if HighestLowerRarityPage < tonumber(PageNumber) then
										HighestLowerRarityPage = tonumber(PageNumber)
									end
								end
							end
						end
					end
				end

				if HighestLowerRarityPage ~= 0 then
					for i,page in pairs (Pages) do
						if page:IsA("Frame") then
							local PageNumber = string.gsub(page.Name, "Page", "")
							if tonumber(PageNumber) >= HighestLowerRarityPage+1 then
								page.Name = "Page" .. tostring(tonumber(PageNumber)+1)
							end
						end
					end
					NewPage.Name = "Page" .. tostring(HighestLowerRarityPage+1)
				else
					NewPage.Name = "Page1"
				end
				
			else --Common
				if #Pages > 0 then
					for i,page in pairs (Pages) do
						if page:IsA("Frame") then
							print(page)
							local PageNumber = string.gsub(page.Name, "Page", "")
							page.Name = "Page" .. tostring(tonumber(PageNumber)+1)
						end
					end
				end
				NewPage.Name = "Page1"
			end
		else
			NewPage.Name = "Page1"
		end
		NewPage.Parent = Menu
		NewPage.Visible = false
		Page = NewPage
	end
	
	if RaritySort then
		Page.BackgroundColor3 = GuiElements.RarityColors:FindFirstChild(StatRarity).Value
	end
	
	return StatRarity,Page,SlotCount
end

local DepositInventory = game.ReplicatedStorage.Events.Utility.DepositInventory
DepositInventory.OnClientEvent:Connect(function()
	for i,menu in pairs (DataMenu.InventoryMenu:GetChildren()) do
		if menu:IsA("Frame") then
			for i,page in pairs (menu:GetChildren()) do
				page:Destroy()
			end
		end
	end
end)


--------------<|Tile Functions|>------------------------------------------------------------------------------------

local function InsertTileInfo(Type, tile, Stat, Value, found, File)
	local StatInfo
	if Type == "Inventory" then
		StatInfo = game.ReplicatedStorage:FindFirstChild(tostring(File)):FindFirstChild(tostring(Stat))
		tile.StatName.Value = tostring(Stat)
		tile.Amount.Text = tostring(Value)
		local ImageId = GetStatImage(File, Stat)
		tile.Picture.Image = ImageId
		found = true
	elseif Type == "Experience" then
		StatInfo = game.ReplicatedStorage:FindFirstChild(tostring(File)):FindFirstChild(tostring(Stat) .. "Skill")
		local CurrentLevel = 0
		--Move into Levels value where the value is how many levels, no for in pairs, just 1,amount,1 loop
		for i,level in pairs (StatInfo.Levels:GetChildren()) do
			if Value >= level.Value and tonumber(level.Name) > CurrentLevel then
				CurrentLevel = tonumber(level.Name)
			end
		end
		--current displays all accumulated exp, should show accumulated exp in this level
		--small total exp text box?
		local NextLevel
		if StatInfo.Levels:FindFirstChild(tostring(CurrentLevel + 1)) then
			NextLevel = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel + 1))
			tile.NextLevel.Text = tostring(NextLevel)
		else
			NextLevel = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel))
			tile.NextLevel.Text = "*"
		end
		local CurrentLevelEXP = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel))
		local ProgressBar = tile.ProgressBar
		ProgressBar.Current.Text = tostring(Value - CurrentLevelEXP.Value)
		ProgressBar.Total.Text = tostring(NextLevel.Value - CurrentLevelEXP.Value)
		tile.CurrentLevel.Text = tostring(CurrentLevel)
		
		local Percentage = tonumber(Value - CurrentLevelEXP.Value) / tonumber(NextLevel.Value - CurrentLevelEXP.Value)
		ProgressBar.Progress.Size = UDim2.new(Percentage, 0, 1, 0)
		found = true
	end
	
	tile.Activated:Connect(function() --What happens when tile is clicked
		print("tile was clicked")
		if ItemViewerOpen == false then
			ItemViewerOpen = true
			local Menu = DataMenu:FindFirstChild(Type .. "Menu"):FindFirstChild(tostring(File) .. "Menu")
			local ItemViewerMenu = DataMenu.ItemViewer
			if Type == "Inventory" then
				local RarityName = StatInfo["GUI Info"].RarityName.Value
				local Rarity = game.ReplicatedStorage.GuiElements.RarityColors:FindFirstChild(RarityName)
				
				ItemViewerMenu.ItemImage.BorderColor3 = Rarity.Value
				ItemViewerMenu.ItemImage.BackgroundColor3 = Rarity.TileColor.Value
				ItemViewerMenu.ItemRarity.Text = RarityName
				ItemViewerMenu.ItemRarity.TextColor3 = Rarity.Value
				ItemViewerMenu.ItemRarity.TextStrokeColor3 = Rarity.TileColor.Value
				
				ItemViewerMenu.ItemAmount.Text = "You Have: " .. tostring(Value)
			else
				ItemViewerMenu.ItemRarity.Text = ""
				
				ItemViewerMenu.ItemAmount.Text = "Total EXP: " .. tostring(Value)
			end
			
			ItemViewerMenu.ItemImage.Image = StatInfo["GUI Info"].InventoryImage.Value
			ItemViewerMenu.ItemName.Text = tostring(Stat)
			
			if tile:FindFirstChild("AmountInStorage") then
				--look for value inside storage gui, and make sure that the value exists before assigning gui number
				local Storage = script.Parent.Parent.TycoonStorage.ComputerScreen
				local StorageItemFile = Storage.ItemsPreview:FindFirstChild(tostring(File))
				local StorageItem = StorageItemFile:FindFirstChild(StatInfo["GUI Info"].RarityName.Value):FindFirstChild(tostring(Stat))
				if ItemViewerMenu.ItemName.Text == tile.StatName.Value then
					ItemViewerMenu.ItemStorage.Text = "Storage: " .. tostring(StorageItem.AmountInStorage.Value)
				end
			else
				ItemViewerMenu.ItemStorage.Text = ""
			end
			
			ItemViewerMenu.Visible = true 
		end
	end)
	
	return found
end

function ManageTiles(Stat, Menu, Value, File, Type)
	--print(Stat,Menu,Value,File,Type) = Stone,OresMenu,2,Ores,Inventory
	local Value = tonumber(Value)
	
	local Rarity
	local Page
	local SlotCount
	local OriginalMaterialSlot
	if Type == "Inventory" then
		OriginalMaterialSlot = GuiElements:FindFirstChild("InventoryMaterialSlot")
		print("Page being associated with item: " .. tostring(Stat) .. " worth " .. tostring(Value))
		Rarity,Page,SlotCount = FindStatPage(Stat,Menu,15,true)
	else
		OriginalMaterialSlot = GuiElements:FindFirstChild("ExperienceSlot")
		Rarity,Page,SlotCount = FindStatPage(Stat,Menu,4,false)
		--SlotCount = #Menu:GetChildren()
		--Page = Menu
	end
		
		
	if SlotCount > 0 then
		local found = false
		
		--Looking to update value of current tile
		for i,tile in pairs (Page:GetChildren()) do
			if tile:IsA("TextButton") then
				if tile.StatName.Value == tostring(Stat) and found == false then --Update Tile
					
					if Value > 0 then
						found = InsertTileInfo(Type, tile, Stat, Value, found, File)--Get rid of looking
					else --Deleting existing tile because value = 0 or zeroed from storage transaction 
						found = true
						local SlotNumber = i
						
						for i,tile in pairs (Page:GetChildren()) do
							if i > SlotNumber then
								if tile:IsA("TextButton") then
									tile.Name = tostring("Slot" .. tostring(i - 1))
									if Type == "Inventory" then
										tile.Row.Value = tile.Row.Value - 1
										tile.Column.Value = tile.Column.Value - 1
										tile.Position = UDim2.new(0.017+0.196*tile.Column.Value, 0, 0.02+0.298*tile.Row.Value, 0)
									else
										tile.Position = UDim2.new(0.028,0,0.037+((i-1)*0.24),0) --change to do with Column and Row
									end
								end
							end
						end
						
						if SlotCount == 1 then --if tile is last on page
							Page:Destroy()
						end
						tile:Destroy()
					end
				end
			end
		end
		
		--Make new tile
		if found == false and Value > 0 then
			print("Making a new tile: " .. tostring(Stat))
			local tile = OriginalMaterialSlot:Clone()
			local PreviousTile = Page:FindFirstChild("Slot" .. tostring(SlotCount))
			local slotNumber = SlotCount + 1
			tile.Name = "Slot" .. tostring(slotNumber)
			
			if Type == "Inventory" then
				if (slotNumber-1)%5 == 0 then
					tile.Row.Value = PreviousTile.Row.Value + 1
					tile.Column.Value = 0
				else
					tile.Row.Value = PreviousTile.Row.Value
					tile.Column.Value = PreviousTile.Column.Value + 1
				end
				
				tile.Rarity.Value = Rarity
				tile.Position = UDim2.new(0.017+0.196*tile.Column.Value, 0, 0.02+0.298*tile.Row.Value, 0)
			else
				tile.Position = UDim2.new(0.028,0,0.037+((SlotCount)*0.24),0)
			end
			
			tile.Parent = Page
			
			local PrevTileY = PreviousTile.Position.Y.Scale
			
			found = InsertTileInfo(Type, tile, Stat, Value, found, File)
		end
	else
		
		--First tile to be made for menu (Change to first tile for page) (function for making a new page to replace canvas function?)
		if Value ~= 0 then			
			local FirstSlot = OriginalMaterialSlot:Clone()
			FirstSlot.Name = "Slot1"
			FirstSlot.Parent = Page
			
			if Type == "Inventory" then
				FirstSlot.Row.Value = 0
				FirstSlot.Column.Value = 0
				FirstSlot.Rarity.Value = Rarity
				FirstSlot.Position = UDim2.new(0.017, 0, 0.02, 0)
			else
				FirstSlot.Position = UDim2.new(0.028,0,0.037,0)
			end
			
			FirstSlot.StatName.Value = tostring(Stat)
			InsertTileInfo(Type, FirstSlot, Stat, Value, nil, File)
		end
	end
end


------------------<|Material PopUp Functions|>-----------------------------------------------------

local MaterialPopUpAmount
local function InsertNewMaterialPopUp(ItemPopUp, Object, File, AmountAdded, Currency)
	--print("New PopUp: " .. tostring(Object))
	local OriginalPopUpGUI = GuiElements:FindFirstChild("PopUpSlot")
	
	--Move other tiles upward
	for i,slot in pairs (ItemPopUp:GetChildren()) do
		--slot.Position = UDim2.new(slot.Position.X.Scale, 0, slot.Position.Y.Scale - .1, 0)
		slot:TweenPosition(UDim2.new(slot.Position.X.Scale, 0, slot.Position.Y.Scale - .105, 0), "Out", "Quint", .8)
	end
	
	print(File, Object)
	local RealObject = game.ReplicatedStorage:FindFirstChild(tostring(File)):FindFirstChild(tostring(Object))
	local Rarity = RealObject["GUI Info"].RarityName.Value
	local RarityFile = game.ReplicatedStorage.GuiElements.RarityColors:FindFirstChild(Rarity)
	local NewPopUp = OriginalPopUpGUI:Clone()
	NewPopUp.Parent = ItemPopUp
	NewPopUp.Amount.Text = tostring(AmountAdded)
	NewPopUp.DisplayName.Text = tostring(Object)
	NewPopUp.Position = UDim2.new(0.835, 0,1, 0)
	MaterialPopUpAmount = #ItemPopUp:GetChildren()
	NewPopUp.Name = "PopUp" .. tostring(MaterialPopUpAmount)
	NewPopUp.Object.Value = tostring(Object)
	
	if Currency then --just shows player the amount of cash they lost/gained (skipped tile management)
		--possibly give money their own popup color or shape?
	end
	
	local ItemImage = GetStatImage(File, Object)
	NewPopUp.Picture.Image = ItemImage
	
	NewPopUp.BackgroundColor3 = RarityFile.TileColor.Value
	NewPopUp.BorderColor3 = RarityFile.Value
	NewPopUp.CircleBorder.BackgroundColor3 = RarityFile.Value
	NewPopUp["Round Edge"].BackgroundColor3 = RarityFile.Value
	NewPopUp["Round Edge"].Inner.BackgroundColor3 = RarityFile.TileColor.Value
	
	NewPopUp:TweenPosition(UDim2.new(0.835, 0,0.825, 0), "Out" , "Quint", .45)
	CountdownPopUp(ItemPopUp, NewPopUp, 5, .2)
end

local PrevItem
local PrevAmount
local CurrentObject
local function ManageMaterialPopups(ObjectName, File, AmountAdded, Currency)
	local ItemPopUp = script.Parent.Parent:FindFirstChild("ItemPopUp")
	if AmountAdded ~= nil then
		if AmountAdded ~= 0 then
			
			if AmountAdded < 0 then
				CurrentObject = "Negative" .. tostring(ObjectName)
			else
				CurrentObject = ObjectName
			end
			
			if PrevItem ~= tostring(CurrentObject) then
				InsertNewMaterialPopUp(ItemPopUp, ObjectName, File, AmountAdded, Currency)
				PrevItem = tostring(ObjectName)
				PrevAmount = AmountAdded
				
			elseif PrevItem == tostring(CurrentObject) and #ItemPopUp:GetChildren() == 0 then
				print("Detected that no slot is available, but prev has been mined")
				InsertNewMaterialPopUp(ItemPopUp, ObjectName, File, AmountAdded, Currency)
				PrevItem = tostring(ObjectName)
				PrevAmount = AmountAdded
				
			elseif #ItemPopUp:GetChildren() >= 1 then
				PrevAmount = PrevAmount + AmountAdded
				
				--Find most recent version of the popup related to the object
				local MostRecent = 0
				for i,slot in pairs (ItemPopUp:GetChildren()) do
					if slot.Object.Value == tostring(ObjectName) then
						if i > MostRecent then
							MostRecent = i
						end
					end
				end
				
				ItemPopUp:FindFirstChild("PopUp" .. tostring(MostRecent)).Amount.Text = tostring(PrevAmount)
				CountdownPopUp(ItemPopUp, ItemPopUp:FindFirstChild("PopUp" .. tostring(MostRecent)), 5, .2)
			end
		end
	end
end


--------------------<|Countdown Functions|>-----------------------------------------------------

function CountdownPopUp(PopUpGui, Slot, TimeBeforeExpire, JumpDistance)
	if Slot:FindFirstChild("TimeLeft") then
		local Timer = Slot:FindFirstChild("TimeLeft")
		Timer.Value = 0
		coroutine.resume(coroutine.create(function()
			for sec = 1,TimeBeforeExpire,1 do
				wait(1)
				--if Timer then
				if sec == Timer.Value + 1 then
					Timer.Value = sec
					if sec == TimeBeforeExpire then
						if Slot:FindFirstChild("NamePlate") then
							local NamePlate = Slot:FindFirstChild("NamePlate")
							NamePlate:TweenPosition(UDim2.new(-12,0,NamePlate.Position.Y.Scale + 0.9 ,0), "Out", "Quint", .3)
							wait(.4)
						end
						Slot:TweenPosition(UDim2.new(Slot.Position.X.Scale + JumpDistance, 0, Slot.Position.Y.Scale, 0), "Out", "Quint", .5)
						wait(.8)
						Slot:Destroy()
						for i,slot in pairs (PopUpGui:GetChildren()) do
							slot.Name = "PopUp" .. tostring(i)
						end
					end
					--else
					--print("Timer is gone for " .. tostring(Slot))
					--So far, only used by expbar because only want one bar on screen, so timer is deleted in InsertEXPBar()
					--if Slot:FindFirstChild("NamePlate") then
					--local NamePlate = Slot:FindFirstChild("NamePlate")
					--NamePlate:TweenPosition(UDim2.new(-12,0,NamePlate.Position.Y.Scale + 0.9 ,0), "Out", "Quint", .3)
					--wait(.4)
					--end
					--Slot:TweenPosition(UDim2.new(Slot.Position.X.Scale + JumpDistance, 0, Slot.Position.Y.Scale, 0), "Out", "Quint", .5)
					--wait(.6)
					--Slot:Destroy()
					--end
				end
			end
		end))
	end
end

local DifferenceEXPAdded = 0
local LastPercentage = 0
local function CountdownDifference(Difference, OriginalProgressBar, Percentage, AmountAdded, Finished)
	local ExpBar = Difference.Parent.Parent
	if ExpBar:FindFirstChild("TimeLeft") then
		DifferenceEXPAdded = DifferenceEXPAdded + AmountAdded
		local Timer = Difference:FindFirstChild("TimeLeft")
		Timer.Value = 0
		if Percentage < LastPercentage or Percentage >= 1 or Finished then
			print("Finished a skill level, updating exp bar",Percentage,LastPercentage)
			LastPercentage = Percentage
			EXPPopUp(ExpBar, DifferenceEXPAdded, 1)
			DifferenceEXPAdded = 0
			
			OriginalProgressBar:TweenSize(UDim2.new(Percentage, 0, 0, 30), "Out", "Quint", .5)
			Difference:TweenSize(UDim2.new(Percentage, 0, 0, 30), "Out", "Quint", .5)
			local PreviousLevel = tonumber(ExpBar.CurrentLevel.Text)
			ExpBar.CurrentLevel.Text = PreviousLevel + 1
			ExpBar.NextLevel.Text = PreviousLevel + 2
			--Maybe put countdown popup here to refresh the experience bar?
			--Level up animation could go here, or in the ShowEXPChange function
		else
			--print("Percentage: " .. tostring(Percentage))
			LastPercentage = Percentage
			coroutine.resume(coroutine.create(function()
				for sec = 1,5,1 do
					wait(1)
					if Timer then
						if sec == Timer.Value + 1 then
							Timer.Value = sec
							if sec == 5 then
								EXPPopUp(ExpBar, DifferenceEXPAdded, 3)
								DifferenceEXPAdded = 0
								OriginalProgressBar:TweenSize(UDim2.new(0, Difference.Size.X.Offset, Difference.Size.Y.Scale, 30), "Out", "Quint", .5)
								wait(.6)
								Difference:Destroy()
							end
							--else
							--coroutine.yield() --if implemented, would this prevent repeats with menu presses? or greater efficiency??
						end
					end
				end
			end))
		end
	end
end


-----------------<|EXPBar PopUp Functions|>--------------------------------------------------

function EXPPopUp(ExpBar, Value, Pace)
	local RealEXPPopUp = GuiElements:FindFirstChild("EXPPopUp")
	local NewExpPopUp = RealEXPPopUp:Clone()
	NewExpPopUp.Parent = ExpBar
	NewExpPopUp.Text = "+" .. tostring(Value) .. "XP"
	NewExpPopUp.Position = UDim2.new(math.random(-17.72,-15.48), 0, math.random(-1.71,-.777), 0)
	NewExpPopUp:TweenSize(UDim2.new(0, 100, 0, 25), "Out", "Quart", .5) --Grow
	wait(Pace)
	NewExpPopUp:TweenSizeAndPosition(UDim2.new(0, 0, 0, 0), UDim2.new(-7.64, 0, 0.123, 0), "Out", "Quint", 1) --Move to bar
	wait(1.2)
	NewExpPopUp:Destroy()
end

local function ShowEXPChange(CurrentLevel, NextLevel, StatInfo, Value, AmountAdded)
	local ExperienceBarGui = script.Parent.Parent:FindFirstChild("EXPBarPopUp")
	local ProgressBar = ExperienceBarGui.ExperienceBar.ProgressBar
	local CurrentLevelEXP = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel))
	
	--Difference bar check
	if ProgressBar:FindFirstChild("EXPDifference") then
		local Difference = ProgressBar.EXPDifference
		local Percentage = tonumber(Value - CurrentLevelEXP.Value) / tonumber(NextLevel.Value - CurrentLevelEXP.Value)
		if Percentage < LastPercentage then
			--Here instead of CountdownDifference to prevent delay
			Difference:TweenSize(UDim2.new(0, 276, 0, 30), "Out", "Quint", .2)
			wait(.2)
			ProgressBar.Progress:TweenSize(UDim2.new(0, 276, 0, 30), "Out", "Quint", .2)
			wait(.2)
			CountdownDifference(Difference, ProgressBar.Progress, Percentage, AmountAdded, true)
		else
			Difference:TweenSize(UDim2.new(0, 276*Percentage, 0, 30), "Out", "Quint", .2)
			CountdownDifference(Difference, ProgressBar.Progress, Percentage, AmountAdded)
		end
	else
		local Difference = ProgressBar.Progress:Clone()
		Difference.ZIndex = 3 --Put behind progress frame
		Difference.Parent = ProgressBar
		Difference.Name = "EXPDifference"
		Difference.BackgroundColor3 = Color3.new(85, 255, 255)
		local TimeLeftValue = Instance.new("IntValue",Difference)
		TimeLeftValue.Name = "TimeLeft"	
		local Percentage = tonumber(Value - CurrentLevelEXP.Value) / tonumber(NextLevel.Value - CurrentLevelEXP.Value)
		Difference:TweenSize(UDim2.new(0, 276*Percentage, 0, 30), "Out", "Quint", .2)
		
		CountdownDifference(Difference, ProgressBar.Progress, Percentage, AmountAdded)
	end
end

local function InsertNewEXPBar(ExperienceBarGui, ExperienceBar, Stat, Value, CurrentLevel, NextLevel, NewBar)
	
	if NewBar ~= true then
		ExperienceBarGui.ExperienceBar.TimeLeft:Destroy() --CountdownPopUp() will recognize and delete other experience bar
		wait(.6)
	end
	
	local NewExperienceBar = ExperienceBar:Clone()
	NewExperienceBar.Parent = ExperienceBarGui
	NewExperienceBar.Position = UDim2.new(0.969, 0, 1.055, 0)
	NewExperienceBar:TweenPosition(UDim2.new(.969, 0, NewExperienceBar.Position.Y.Scale - .1, 0), "Out", "Quint", .5)
	
	NewExperienceBar.CurrentLevel.Text = tostring(CurrentLevel)
	NewExperienceBar.NextLevel.Text = tostring(NextLevel)
	
	local StatInfo = game.ReplicatedStorage:FindFirstChild("Skills"):FindFirstChild(tostring(Stat) .. "Skill")
	local ProgressBar = ExperienceBarGui.ExperienceBar.ProgressBar
	local CurrentLevelEXP = StatInfo.Levels:FindFirstChild(tostring(CurrentLevel))
	local Percentage = tonumber(Value - CurrentLevelEXP.Value) / tonumber(NextLevel.Value - CurrentLevelEXP.Value)
	ProgressBar.Progress.Size = UDim2.new(0, 276*Percentage, 0, 30)
	CountdownPopUp(ExperienceBarGui, NewExperienceBar, 12, .45)
	wait(.5)
	
	local NamePlate = NewExperienceBar.NamePlate
	NamePlate.DisplayName.Text = tostring(Stat)
	NamePlate:TweenPosition(UDim2.new(-12, 0, -0.9, 0), "Out", "Quint", .3)
end

local PrevEXPBar
local function ManageEXPPopUp(Stat, Value, AmountAdded)
	local ExperienceBar = GuiElements:FindFirstChild("ExperienceBar")
	local ExperienceBarGui = script.Parent.Parent:FindFirstChild("EXPBarPopUp")
	local StatInfo = game.ReplicatedStorage:FindFirstChild("Skills"):FindFirstChild(tostring(Stat) .. "Skill")
	
	local CurrentLevel,NextLevel = FindStatLevel(StatInfo, Value)
	
	if AmountAdded ~= nil then
		if #ExperienceBarGui:GetChildren() ~= 0 then
			if ExperienceBarGui.ExperienceBar.NamePlate.DisplayName.Text == tostring(Stat) then
				--DisplayEXPChange(ExperienceBarGui, AmountAdded)
			else	
				InsertNewEXPBar(ExperienceBarGui,ExperienceBar,Stat, Value, CurrentLevel, NextLevel)
			end
			ShowEXPChange(CurrentLevel, NextLevel, StatInfo, Value, AmountAdded)
			CountdownPopUp(ExperienceBarGui, ExperienceBarGui.ExperienceBar, 12, .5)
		else --Pop up new experience bar
			InsertNewEXPBar(ExperienceBarGui,ExperienceBar,Stat, Value, CurrentLevel, NextLevel, true)
			ShowEXPChange(CurrentLevel, NextLevel, StatInfo, Value, AmountAdded)
		end
	end
	
end

-------------------------------------<High-Traffic Functions>-----------------------------------------------------------

local UpdateInventory = game.ReplicatedStorage.Events.GUI:WaitForChild("UpdateInventory")
UpdateInventory.OnClientEvent:Connect(function(Stat, File, Value, AmountAdded, Type, Currency)
	local TypeSlots = DataMenu:FindFirstChild(tostring(Type) .. "Menu")
	local Slots
	if File then
		Slots = TypeSlots:FindFirstChild(File .. "Menu") or TypeSlots:FindFirstChild(File)
	end
	
	if Type == "Inventory" then
		ManageMaterialPopups(Stat, File, AmountAdded, Currency)
		
		--if Currency == nil then	
			--ManageTiles(Stat, Slots, Value, File, Type)
		--end
	elseif Type == "Experience" then --Later, possibly have tile/pop-up manager handle types
		
		--The fact that experience tiles are also unlocked once you get at least one point of exp
		--would be fun to have a "You've unlocked a new skill!" animated gui (or levelling up animation)
		if string.find(tostring(Stat), "Skill") then --Find Skill in string
			Stat = string.gsub(tostring(Stat), "Skill", "") --Replace Skill with ""
		end
		ManageEXPPopUp(Stat, Value, AmountAdded)
		--ManageTiles(Stat, Slots, Value, File, Type)
	end
	if Currency == nil then
		print("DataMenu tile for " .. tostring(Stat) .. " has value of " .. tostring(Value))
		ManageTiles(Stat, Slots, Value, File, Type)
	end
end)

--ReadyMenuButtons(DataMenu) --Manage Tabs
